<?php

namespace Drupal\menu_example\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\examples\Utility\DescriptionTemplateTrait;
/**
 * Controller routines for menu example routes.
 *
 * The response of Drupal's HTTP Kernel system's request is generated by
 * a piece of code called the controller.
 *
 * In Drupal 8, we use a controller class
 * for placing those piece of codes in methods which responds to a route.
 *
 * This file will be placed at {module_name}/src/Controller directory. Route
 * entries uses a key '_controller' to define the method called from controller
 * class.
 *
 * @see https://www.drupal.org/docs/8/api/routing-system/introductory-drupal-8-routes-and-controllers-example
 */
class MenuExampleController extends ControllerBase {

  use DescriptionTemplateTrait;

  /**
   * {@inheritdoc}
   */
  protected function getModuleName() {
    return 'menu_example';
  }

  /**
   * Page callback for the simplest introduction menu entry.
   *
   * The controller callback defined menu_examples.routing.yml file,
   * maps the path 'examples/menu-example' to this method.
   *
   * @throws \InvalidArgumentException
   */
  public function basicInstructions() {
    return [
      $this->description(),
    ];
  }

  /**
   * Show a menu link in a menu other than the default "Navigation" menu.
   */
  public function alternateMenu() {
    return [
      '#markup' => $this->t('This will be in the Main menu instead of the default Tools menu'),
    ];

  }

  /**
   * A menu entry with simple permissions using 'access protected menu example'.
   *
   * @throws \InvalidArgumentException
   */
  public function permissioned() {
    $url = Url::fromUri('internal:/examples/menu-example/permissioned/controlled');
    $link = Link::fromTextAndUrl($this->t('examples/menu-example/permissioned/controlled'), $url)->toString();
    return [
      '#markup' => $this->t('A menu item that requires the "access protected menu example" permission is at @link', ['@link' => $link]),
    ];
  }

  /**
   * Only accessible when the user will be granted with required permission.
   *
   * The permission is defined in file menu_examples.permissions.yml.
   */
  public function permissionedControlled() {
    return [
      '#markup' => $this->t('This menu entry will not show and the page will not be accessible without the "access protected menu example" permission to current user.'),
    ];
  }

  /**
   * Demonstrates the use of custom access check in routes.
   *
   * @throws \InvalidArgumentException

   * @see \Drupal\menu_example\Controller\MenuExampleController::customAccessPage()
   */
  public function customAccess() {
    $url = Url::fromUri('internal:/examples/menu-example/custom-access/page');
    $link = Link::fromTextAndUrl($this->t('examples/menu-example/custom-access/page'), $url)->toString();
    return [
      '#markup' => $this->t('A menu item that requires the user to posess a role of "authenticated" is at @link', ['@link' => $link]),
    ];
  }

  /**
   * Content will be displayed only if access check is satisfied.
   *
   * @see \Drupal\menu_example\Controller\MenuExampleController::customAccess()
   */
  public function customAccessPage() {
    return [
      '#markup' => $this->t('This menu entry will not be visible and access will result
        in a 403 error unless the user has the "authenticated" role. This is
        accomplished with a custom access check plugin.'),
    ];
  }

  /**
   * Only callback without a menu link.
   *
   * @throws \InvalidArgumentException
   */
  public function routeOnly() {
    $url = Url::fromUri('internal:/examples/menu-example/route-only/callback');
    $link = Link::fromTextAndUrl($this->t('examples/menu-example/route-only/callback'), $url)->toString();
    return [
      '#markup' => $this->t('A menu entry with no menu link is at @link', ['@link' => $link]),
    ];
  }

  /**
   * Such callbacks can be user for creating web services in Drupal 8.
   */
  public function routeOnlyCallback() {
    return [
      '#markup' => $this->t('The route entry has no corresponding menu links entry, so it provides a route without a menu link, but it is the same in every other way to the simplest example.'),
    ];
  }

  /**
   * @param string $path
   *   Path/URL of menu item.
   *
   * @param string $title
   *   Title of menu item.
   *
   * @return array
   *   Controller response.
   */
  public function tabsPage($path, $title) {
    $secondary = substr_count($path, '/') > 2 ? 'secondary ' : '';
    return array(
      '#markup' => $this->t('This is the @secondary tab "@tabname" in the "basic tabs" example.', ['@secondary' => $secondary, '@tabname' => $title]),
    );
  }

  /**
   * Demonstrates use of url arguments in for menu item.
   *
   * @param string $arg1
   *   First argument of url.
   * @param string $arg2
   *   Second argument of url.
   *
   * @return array
   *   Controller response.
   *
   * @see https://www.drupal.org/docs/8/api/routing-system/parameters-in-routes
   */
  public function urlArgument($arg1, $arg2) {
    // Perpare link for single arguments.
    $url = Url::fromUri('internal:/examples/menu-example/use-url-arguments/one');
    $link = Link::fromTextAndUrl($this->t('examples/menu-example/use-url-arguments/one'), $url)->toString();

    // Prepare link for multiple arguments.
    $urltwo = Url::fromUri('internal:/examples/menu-example/use-url-arguments/one/two');
    $linktwo = Link::fromTextAndUrl($this->t('examples/menu-example/use-url-arguments/one/two'), $urltwo)->toString();

    $markup = $this->t('This page demonstrates using arguments in the url. For example, access it with @link for single argument or @linktwo for two arguments in URL', ['@link' => $link, '@linktwo' => $linktwo]);

    if (!empty($arg1)) {
      $markup .= '<div>' . $this->t('Argument 1 = @arg', array('@arg' => $arg1)) . '</div>';
    }
    if (!empty($arg2)) {
      $markup .= '<div>' . $this->t('Argument 2 = @arg', array('@arg' => $arg2)) . '</div>';
    }

    return [
      '#markup' => $markup,

    ];
  }

  /**
   * Demonstrate generation of dynamic creation of page title.
   *
   * @see \Drupal\menu_example\Controller\MenuExampleController::backTitle()
   */
  public function titleCallback() {
    return [
      '#markup' => $this->t('The title of this page is dynamically changed by the title callback for this route defined in menu_example.routing.yml.'),
    ];
  }

  /**
   * Generates title dynamically.
   *
   * @see \Drupal\menu_example\Controller\MenuExampleController::titleCallback()
   */
  public function backTitle() {
    return \Drupal::currentUser()->getDisplayName();
  }

  /**
   * Demonstrates how you can provide a placeholder url arguments.
   *
   * @throws \InvalidArgumentException
   *
   * @see \Drupal\menu_example\Controller\MenuExampleController::placeholderArgsDisplay()
   * @see https://www.drupal.org/docs/8/api/routing-system/using-parameters-in-routes
   */
  public function placeholderArgs() {
    $url = Url::fromUri('internal:/examples/menu-example/placeholder-argument/3343/display');
    $link = Link::fromTextAndUrl($this->t('examples/menu-example/placeholder-argument/3343/display'), $url)->toString();
    return [
      '#markup' => $this->t('Demonstrate placeholders by visiting @link', ['@link' => $link]),
    ];
  }

  /**
   * Displays placeholder argument supplied in URL.
   *
   * @param int $arg
   *   URL argument.
   *
   * @return array
   *   URL argument.
   *
   * @see \Drupal\menu_example\Controller\MenuExampleController::placeholderArgs()
   */
  public function placeholderArgsDisplay($arg) {
    return [
      '#markup' => $arg,
    ];

  }

  /**
   * Demonstrate how one can alter the existing routes.
   */
  public function pathOverride() {
    return [
      '#markup' => $this->t('This menu item was created strictly to allow the RouteSubscriber class to have something to operate on. menu_example.routing.yml defined the path as examples/menu_example/menu_original_path. The alterRoutes() changes it to examples/menu_example/menu_altered_path. You can try navigating to both paths and see what happens!'),
    ];
  }

}
